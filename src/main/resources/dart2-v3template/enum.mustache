
enum {{classname}} {
  {{#allowableValues}}
    {{#enumVars}}{{{name}}}{{^-last}}, {{/-last}}{{/enumVars}}
  {{/allowableValues}}
}

extension {{classname}}Extension on {{classname}} {
  String get name {
    return toMap[this];
  }

  // you have to call this extension class to use this as this is not yet supported
  static {{classname}} type(String name) {
    return fromMap[name];
  }

  static Map<String, {{classname}}> fromMap = {  {{#allowableValues}}
  {{#enumVars}}{{{value}}}:{{classname}}.{{{name}}}{{^-last}}, {{/-last}}{{/enumVars}}
{{/allowableValues}} };
  static Map<{{classname}}, String> toMap = {  {{#allowableValues}}
  {{#enumVars}}{{classname}}.{{{name}}}:{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}
{{/allowableValues}} };

  static {{classname}} fromJson(dynamic data) {
    var found = fromJsonMap[data];
    if (found == null) {
      throw('Unknown enum value to decode: $data');
    }
    return found;
  }

  static dynamic toJson({{classname}} data) {
    return toJsonMap[data];
  }

  static List<{{classname}}> listFromJson(List<dynamic> json) {
    return json == null ? <{{classname}}>[] : json.map((value) => fromJson(value)).toList();
  }

  static {{classname}} copyWith({{classname}} instance) {
    return instance;
  }

  static Map<String, {{classname}}> mapFromJson(Map<String, dynamic> json) {
    final map = <String, {{classname}}>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) => map[key] = fromJson(value));
    }
    return map;
  }
}


