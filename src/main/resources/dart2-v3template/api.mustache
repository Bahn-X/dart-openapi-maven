part of {{pubName}}.api;

{{#operations}}

class {{classname}} {
  final ApiClient apiClient;
  final delegate = LocalApiClient();

  {{classname}}(this.apiClient) : assert(apiClient != null);

  {{#operation}}
  /// {{summary}}
  ///
  /// {{notes}}
  {{#returnType}}Future<{{{returnType}}}> {{/returnType}}{{^returnType}}Future {{/returnType}}{{nickname}}({{#allParams}}{{#required}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{Options options{{#hasParams}}, {{/hasParams}}{{#allParams}}{{^required}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}} }{{/hasOptionalParams}}{{^hasOptionalParams}}{{#hasParams}}, {{/hasParams}}{Options options}{{/hasOptionalParams}}) async {
    Object postBody{{#bodyParam}} = {{paramName}}{{/bodyParam}};

    // verify required params are set
    {{#allParams}}
      {{#required}}
    if({{paramName}} == null) {
     throw ApiException(400, 'Missing required param: {{paramName}}');
    }
      {{/required}}
    {{/allParams}}

    // create path and map variables
    final __path = '{{{path}}}'{{#pathParams}}.replaceAll('{' + '{{baseName}}' + '}', {{{paramName}}}.toString()){{/pathParams}};

    // query params
    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{}..addAll(options?.headers?.cast<String, String>() ?? {});
    if(headerParams['Accept'] == null) {
      {{#hasProduces}}headerParams['Accept'] = '{{#produces}}{{mediaType}}{{#hasMore}},{{/hasMore}}{{/produces}}';{{/hasProduces}}
    }

    {{#queryParams}}
    {{^required}}
    if({{paramName}} != null) {
    {{/required}}
      queryParams.addAll(convertParametersForCollectionFormat(apiClient.deserializeDelegate, '{{collectionFormat}}', '{{baseName}}', {{paramName}}));
    {{^required}}
    }
    {{/required}}
    {{/queryParams}}
    {{#headerParams}}
    headerParams['{{baseName}}'] = {{paramName}};
    {{/headerParams}}

    final authNames = <String>[{{#authMethods}}'{{name}}'{{#hasMore}}, {{/hasMore}}{{/authMethods}}];
    final opt = options ?? Options();

  {{#vendorExtensions.x-dart-content-json}}
    final contentTypes = [{{#consumes}}'{{{mediaType}}}'{{#hasMore}},{{/hasMore}}{{/consumes}}];

    if (contentTypes.isNotEmpty && headerParams['Content-Type'] == null) {
      headerParams['Content-Type'] = contentTypes[0];
    }
    if (postBody != null) {
      postBody = delegate.serialize(postBody);
    }
  {{/vendorExtensions.x-dart-content-json}}
  {{#vendorExtensions.x-dart-content-form}}
    if (headerParams['Content-Type'] == null) {
      headerParams['Content-Type'] = 'application/x-www-form-urlencoded';
    }
    final formData = <String, String>{};
    {{#formParams}}
      {{^isFile}}
    formData['{{baseName}}'] = Uri.encodeFull(parameterToString(delegate, {{paramName}}));
      {{/isFile}}
    {{/formParams}}
    {{#hasFormParams}}
      postBody = formData.entries.map((me) => me.key + "=" + me.value).join("&");
    {{/hasFormParams}}
  {{/vendorExtensions.x-dart-content-form}}
  {{#vendorExtensions.x-dart-content-multipartform}}
    if (headerParams['Content-Type'] == null) {
      headerParams['Content-Type'] = 'multipart/form-data';
    }
    final formData = <String, dynamic>{};

    {{#formParams}}
      {{^isFile}}
    if ({{paramName}} != null) {
      formData['{{baseName}}'] = Uri.encodeFull(parameterToString(delegate, {{paramName}}));
    }
      {{/isFile}}
      {{#isFile}}
    if ({{paramName}} != null) {
      formData['{{baseName}}'] = {{paramName}};
    }
      {{/isFile}}
    {{/formParams}}
      if (formData.isNotEmpty) {
      postBody = FormData.fromMap(formData);
      }
  {{/vendorExtensions.x-dart-content-multipartform}}

    opt.headers = headerParams;
    opt.method = '{{httpMethod}}';

    var response = await apiClient.invokeAPI(__path,
                                             queryParams,
                                             postBody,
                                             headerParams,
                                             authNames, opt);

    if(response.statusCode >= 400) {
      throw ApiException(response.statusCode, await decodeBodyBytes(response));
    } else if(response.body != null) {
      {{#isListContainer}}
        {{#returnType}}
      return (apiClient.deserialize(await decodeBodyBytes(response), '{{{returnType}}}') as List).map((item) => item as {{returnBaseType}}).toList();
        {{/returnType}}
      {{/isListContainer}}
      {{^isListContainer}}
        {{#isMapContainer}}
          {{#returnType}}
      return {{{returnType}}}.from(apiClient.deserialize(await decodeBodyBytes(response), '{{{returnType}}}'));
          {{/returnType}};
        {{/isMapContainer}}
        {{^isMapContainer}}
          {{#returnType}}
      return apiClient.deserialize(await decodeBodyBytes(response), '{{{returnType}}}') as {{{returnType}}};
          {{/returnType}}
        {{/isMapContainer}}
      {{/isListContainer}}
    } else {
      return{{#returnType}} null{{/returnType}};
    }
  }
  {{/operation}}
}
{{/operations}}
