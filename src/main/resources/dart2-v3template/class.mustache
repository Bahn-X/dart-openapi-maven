// {{{name}}}
class {{classname}}{{#parent}} extends {{parent}}{{/parent}} {
{{#vars}}
  {{^vendorExtensions.x-dart-inherited}}
    {{#description}}/* {{{description}}} */{{/description}}
    {{^allowableValues}}
      {{{dataType}}} {{{name}}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}};
    {{/allowableValues}}
    {{#allowableValues}}
      {{#isEnum}}
        {{{datatypeWithEnum}}} {{{name}}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}};
      {{/isEnum}}
      {{^isEnum}}
        {{^complexType}}
          {{#min}} // range from {{min}} to {{max}}
            {{{dataType}}} {{{name}}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}};
          {{/min}}
          {{classname}}{{nameInCamelCase}}Enum {{{name}}}{{#defaultValue}} = {{classname}}{{nameInCamelCase}}Enum.{{{defaultValue}}}{{/defaultValue}};
        {{/complexType}}
        {{#complexType}}
              {{{dataType}}} {{{name}}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}};
        {{/complexType}}
      {{/isEnum}}
    {{/allowableValues}}
  {{/vendorExtensions.x-dart-inherited}}
{{/vars}}
{{^hasVars}}
  dynamic json;
{{/hasVars}}
{{classname}}();

  @override
  String toString() {
    return '{{classname}}[{{#vars}}{{{name}}}=${{{name}}}, {{/vars}}{{^hasVars}}json=$json{{/hasVars}}]';
  }

{{^hasVars}}
  {{classname}}.fromJson(dynamic rawValue) {
    this.json = rawValue;
  }

  dynamic toJson() {
    return json;
  }
{{/hasVars}}
{{#hasVars}}
  fromJson(Map<String, dynamic> json) {
    if (json == null) return;
  {{#parent}}super.fromJson(json);{{/parent}}
  {{#vars}}
    {{^vendorExtensions.x-dart-inherited}}
    {{#isArray}}{{>_complex_from_json}}{{/isArray}}{{#isMap}}{{>_complex_from_json}}{{/isMap}}{{^items}}{{{name}}} = (json[r'{{{baseName}}}'] == null) ? null : {{>_simple_from_json}};{{/items}}
    {{/vendorExtensions.x-dart-inherited}}{{/vars}}
  }

  {{classname}}.fromJson(Map<String, dynamic> json) {
    fromJson(json); // allows child classes to call
  }

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    {{#vars}}
      {{^vendorExtensions.x-dart-inherited}}
        {{^isNullable}}
    if ({{{name}}} != null) {
        {{/isNullable}}
      {{#isArray}}
        json[r'{{baseName}}'] = {{{name}}}.map((v) => LocalApiClient.serialize(v)).toList();
      {{/isArray}}
      {{#isMap}}
        json[r'{{baseName}}'] = Map.fromIterables({{{name}}}.keys,
          {{{name}}}.values.map((v) => LocalApiClient.serialize(v)));
      {{/isMap}}
      {{^items}}
        {{#isDateTime}}
          json[r'{{baseName}}'] = {{{name}}}.toUtc().toIso8601String();
        {{/isDateTime}}
        {{#isDate}}
          json[r'{{baseName}}'] = {{{name}}}.toUtc().toIso8601String();
        {{/isDate}}
        {{#isEnum}}
          json[r'{{baseName}}'] = {{{name}}}.toJson();
        {{/isEnum}}
        {{#isModel}}
          json[r'{{baseName}}'] = {{{complexType}}}.toJson({{{name}}});
        {{/isModel}}
        {{#isPrimitiveType}}

        {{/isPrimitiveType}}
      {{/items}}
      {{^isNullable}}
    }
        {{/isNullable}}
      {{/vendorExtensions.x-dart-inherited}}
    {{/vars}}
    return json;
  }
{{/hasVars}}
  static List<{{classname}}> listFromJson(List<dynamic> json) {
    return json == null ? <{{classname}}>[] : json.map((value) => {{classname}}.fromJson(value)).toList();
  }

  static Map<String, {{classname}}> mapFromJson(Map<String, dynamic> json) {
    final map = <String, {{classname}}>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) => map[key] = {{classname}}.fromJson(value));
    }
    return map;
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }

    if (other is {{classname}} && runtimeType == other.runtimeType) {
  {{#hasVars}}
    return {{^hasVars}}json?.equals(other.json);{{/hasVars}}{{#vars}}{{^vendorExtensions.x-dart-inherited}}
    {{#complexType}}
      {{#isArray}}
        const ListEquality().equals({{{name}}}, other.{{{name}}}){{^-last}} &&
      {{/-last}}
      {{/isArray}}
      {{^isArray}}
        {{#isMap}}
          const MapEquality().equals({{{name}}}, other.{{{name}}}){{^-last}} &&
        {{/-last}}
        {{/isMap}}
        {{^isMap}}
          {{{name}}} == other.{{{name}}}{{^-last}} && // other
        {{/-last}}
        {{/isMap}}
      {{/isArray}}
    {{/complexType}}{{^complexType}}
    {{#isArray}}
      const ListEquality().equals({{{name}}}, other.{{{name}}}){{^-last}} &&
    {{/-last}}
    {{/isArray}}
    {{^isArray}}
     {{{name}}} == other.{{{name}}}{{^-last}} &&
    {{/-last}}
    {{/isArray}}
  {{/complexType}}{{/vendorExtensions.x-dart-inherited}}{{/vars}}
    {{#parent}} &&
    super==other{{/parent}};{{/hasVars}}{{^hasVars}}
    return {{#parent}}super==other{{/parent}}{{^parent}}true{{/parent}};{{/hasVars}}
    }

    return false;
  }

  @override
  int get hashCode {
    var hashCode = runtimeType.hashCode;

  {{#hasVars}}
    {{#vars}}{{^vendorExtensions.x-dart-inherited}}
    {{#complexType}}
      {{#isArray}}
        hashCode = hashCode ^ const ListEquality().hash({{{name}}});
      {{/isArray}}
      {{^isArray}}
        {{#isMap}}
            hashCode = hashCode ^ const MapEquality().hash({{{name}}});
        {{/isMap}}
        {{^isMap}}
            if ({{{name}}} != null) {
              hashCode = hashCode ^ {{{name}}}.hashCode;
            }
        {{/isMap}}
      {{/isArray}}
    {{/complexType}}{{^complexType}}
    if ({{{name}}} != null) {
      {{#isArray}}
        hashCode = hashCode ^ const ListEquality().hash({{{name}}});
      {{/isArray}}
      {{^isArray}}
      hashCode = hashCode ^ {{{name}}}.hashCode;
      {{/isArray}}
    }
{{/complexType}}{{/vendorExtensions.x-dart-inherited}}{{/vars}}{{/hasVars}}{{^hasVars}}if (json != null) { hashCode = hashCode ^ json.hashCode; }{{/hasVars}}

    return hashCode{{#parent}} ^ super.hashCode{{/parent}};
  }

  {{classname}} copyWith({{#hasVars}}{
     {{#vars}}
       {{^vendorExtensions.x-dart-inherited}}
         {{^complexType}}
           {{#allowableValues}}
             {{^min}}
               {{classname}}{{nameInCamelCase}}Enum {{{name}}},
             {{/min}}
             {{#min}}
               {{{dataType}}} {{{name}}},
             {{/min}}
           {{/allowableValues}}
           {{^allowableValues}}
             {{{dataType}}} {{{name}}},
           {{/allowableValues}}
         {{/complexType}}
         {{#complexType}}
           {{{dataType}}} {{{name}}},
         {{/complexType}}
       {{/vendorExtensions.x-dart-inherited}}
       {{#vendorExtensions.x-dart-inherited}}
         {{{dataType}}} {{{name}}},
       {{/vendorExtensions.x-dart-inherited}}
     {{/vars}}
    }{{/hasVars}}) {
    {{classname}} copy = {{classname}}();
  {{#vars}}
    {{#isArray}}
      {{#items.isPrimitiveType}}
        copy.{{{name}}} = {{{name}}} ?? []..addAll(this.{{{name}}});
      {{/items.isPrimitiveType}}
      {{^items.isPrimitiveType}}
        {
        var newVal;
        final v = {{{name}}} ?? this.{{{name}}};
        {{#items}}
          newVal = <{{^vendorExtensions.x-dart-dynamic}}{{{complexType}}}{{/vendorExtensions.x-dart-dynamic}}{{#vendorExtensions.x-dart-dynamic}}dynamic{{/vendorExtensions.x-dart-dynamic}}>{{>list-copy-with}};
        {{/items}}
        copy.{{{name}}} = newVal;
        }
      {{/items.isPrimitiveType}}
    {{/isArray}}
    {{#isMap}}
      {{^isPrimitiveType}}
        copy.{{{name}}} = {{{name}}} ?? (this.{{{name}}} == null ? {} : {}..addAll(this.{{{name}}}));
      {{/isPrimitiveType}}
      {{^isPrimitiveType}}
        {{#isContainer}}
          {
          var newVal;
          final fld = {{{name}}} ?? this.{{{name}}};
          {{#items}}
            {{#enumName}}
              newVal = fld?.map((k, v) => MapEntry(k, v));
            {{/enumName}}
            {{^enumName}}
              newVal = fld?.map((k, v) => MapEntry(k, {{>copy-with}} )); // e1
            {{/enumName}}
          {{/items}}
        {{/isContainer}}
        {{^isContainer}}
          newVal = fld?.map((k, v) => MapEntry(k, {{>copy-with}}));  // e2
        {{/isContainer}}
        copy.{{{name}}} = newVal;
        }
      {{/isPrimitiveType}}
    {{/isMap}}
    {{^isContainer}}
      {{#isModel}}
        copy.{{{name}}} = {{{name}}} ?? this.{{{name}}}?.copyWith();
      {{/isModel}}
      {{^isModel}}
        copy.{{{name}}} = {{{name}}} ?? this.{{{name}}};
      {{/isModel}}
    {{/isContainer}}
  {{/vars}}
    return copy;
  }
}

  {{#vars}}
  {{^vendorExtensions.x-dart-inherited}}
    {{^complexType}}
      {{^min}}
        {{#allowableValues}}
           // Inline used enum: {{classname}} {{{name}}}
          enum {{{enumName}}} { {{#enumVars}}{{{name}}}{{^-last}}, {{/-last}}{{/enumVars}} }

          extension {{{enumName}}}Extension on {{{enumName}}} {

            static Map<String, {{{enumName}}}> fromMap = {
            {{#allowableValues}}
              {{#enumVars}}{{{value}}}:{{{enumName}}}.{{{name}}}{{^-last}}, {{/-last}}{{/enumVars}}
            {{/allowableValues}} };
            static Map<{{{enumName}}}, String> toMap = {
            {{#allowableValues}}
              {{#enumVars}}{{{enumName}}}.{{{name}}}:{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}
            {{/allowableValues}} };

            String toJson() => toMap[this];
            static {{{enumName}}} fromJson(String key) => fromMap[key];

            static List<{{{enumName}}}> listFromJson(List<dynamic> json) {
              return json == null ? <{{{enumName}}}>[] : json.map((value) => fromJson(value)).toList();
            }

            static {{{enumName}}} copyWith({{{enumName}}} instance) {
              return instance;
            }
          }
        {{/allowableValues}}
      {{/min}}
    {{/complexType}}
  {{/vendorExtensions.x-dart-inherited}}
{{/vars}}
