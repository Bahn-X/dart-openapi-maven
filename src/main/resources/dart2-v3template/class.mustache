class {{classname}} {
  {{#vars}}
  {{#description}}/* {{{description}}} */{{/description}}
  {{{dataType}}} {{name}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}};
  {{#allowableValues}}
  {{#min}} // range from {{min}} to {{max}}{{/min}}//{{^min}}enum {{name}}Enum { {{#values}} {{.}}, {{/values}} };{{/min}}{
  {{/allowableValues}}
  {{/vars}}
  {{classname}}();

  @override
  String toString() {
    return '{{classname}}[{{#vars}}{{name}}=${{name}}, {{/vars}}]';
  }

  {{classname}}.fromJson(Map<String, dynamic> json) {
    if (json == null) return;
  {{#vars}}
    if (json[r'{{baseName}}'] == null) {
      {{name}} = null;
    } else {
  {{#allowableValues}}
    {{#complexType}}
    {{#isListContainer}}
    {{name}} = {{complexType}}TypeTransformer.listFromJson(json[r'{{baseName}}']);
    {{/isListContainer}}
    {{^isListContainer}}
      {{#isMapContainer}}
    {{name}} = {{complexType}}TypeTransformer.mapFromJson(json[r'{{baseName}}']);
      {{/isMapContainer}}
      {{^isMapContainer}}
    {{name}} = {{complexType}}TypeTransformer.fromJson(json[r'{{baseName}}']);
      {{/isMapContainer}}
    {{/isListContainer}}
    {{/complexType}}

  {{/allowableValues}}
  {{^allowableValues}}
  {{#isDateTime}}
      {{name}} = DateTime.parse(json[r'{{baseName}}']);
  {{/isDateTime}}
  {{#isDate}}
    var formatter = DateFormat(r'yyyy-MM-dd');
    {{name}} = formatter.parseStrict(json[r'{{baseName}}']);
  {{/isDate}}
  {{^isDateTime}}
  {{^isDate}}
    {{#complexType}}
      {{#isListContainer}}
        {{#items.allowableValues}}
          {{name}} = {{complexType}}TypeTransformer.listFromJson(json[r'{{baseName}}']);
        {{/items.allowableValues}}
        {{^items.allowableValues}}
          {{name}} = {{complexType}}.listFromJson(json[r'{{baseName}}']);
        {{/items.allowableValues}}
      {{/isListContainer}}
      {{^isListContainer}}
      {{#isMapContainer}}
        {
        final _jsonFieldName = r'{{{baseName}}}';
        {{name}} = {{#items}}
          {{#complexType}}
            {{#isListContainer}}
json[_jsonFieldName].map((String key, dynamic value) => MapEntry<String, {{{dataType}}}>(key, {{{dataType}}}.listFromJson(value)));
            {{/isListContainer}}
            {{^isListContainer}}
              {{#isMapContainer}}
null;                // too complex?
              {{/isMapContainer}}
              {{^isMapContainer}}
json[_jsonFieldName].map((String key, dynamic value) => MapEntry<String, {{{dataType}}}>(key, {{{dataType}}}.fromJson(value)));
              {{/isMapContainer}}
            {{/isListContainer}}
          {{/complexType}}
          {{^complexType}}
            {{#isListContainer}}
json[_jsonFieldName].map((String key, dynamic value) => MapEntry<String, {{{dataType}}}>(key, json[_jsonFieldName]?.cast<{{{dataType}}}>()));
            {{/isListContainer}}
            {{^isListContainer}}
              {{#isMapContainer}}
null; // map of maps?
              {{/isMapContainer}}
              {{^isMapContainer}}
json[_jsonFieldName].map((String key, dynamic value) => MapEntry<String, {{{dataType}}}>(key, json[_jsonFieldName]?.cast<{{{dataType}}}>()));
              {{/isMapContainer}}
            {{/isListContainer}}
          {{/complexType}}
        {{/items}}
        {{^items}}
{{complexType}}.mapFromJson(json[_jsonFieldName]);
        {{/items}}
        }
      {{/isMapContainer}}
      {{^isMapContainer}}
      {{name}} = {{complexType}}.fromJson(json[r'{{baseName}}']);
      {{/isMapContainer}}
      {{/isListContainer}}
    {{/complexType}}
    {{^complexType}}
      {{#isListContainer}}
      {{name}} = (json[r'{{baseName}}'] as List)?.cast<{{items.datatype}}>();
      {{/isListContainer}}
      {{^isListContainer}}
        {{#isMapContainer}}
          {{name}} = (json[r'{{baseName}}'] as Map)?.cast<String, {{items.datatype}}>();
        {{/isMapContainer}}
        {{^isMapContainer}}
          {{name}} = json[r'{{baseName}}'];
        {{/isMapContainer}}
      {{/isListContainer}}
    {{/complexType}}
  {{/isDate}}
  {{/isDateTime}}
  {{/allowableValues}}
    }
  {{/vars}}
  }

  Map<String, dynamic> toJson(DeserializeDelegate serializer) {
    final json = <String, dynamic>{};
    {{#vars}}
        {{^isNullable}}
    if ({{name}} != null) {
        {{/isNullable}}
        {{#isDateTime}}
      json[r'{{baseName}}'] = {{name}}.toUtc().toIso8601String();
      {{/isDateTime}}
      {{#isDate}}
      json[r'{{baseName}}'] = {{name}}.toUtc().toIso8601String();
      {{/isDate}}
      {{^isDateTime}}
      {{^isDate}}
        json[r'{{baseName}}'] = serializer.serialize({{name}});
      {{/isDate}}
      {{/isDateTime}}
        {{^isNullable}}
    }
        {{/isNullable}}
    {{/vars}}
    return json;
  }

  static List<{{classname}}> listFromJson(List<dynamic> json) {
    return json == null ? <{{classname}}>[] : json.map((value) => {{classname}}.fromJson(value)).toList();
  }

  static Map<String, {{classname}}> mapFromJson(Map<String, dynamic> json) {
    final map = <String, {{classname}}>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) => map[key] = {{classname}}.fromJson(value));
    }
    return map;
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }

    if (other is {{classname}} && runtimeType == other.runtimeType) {
  {{#hasVars}}
    return {{#vars}}
    {{#complexType}}
      {{#isListContainer}}
        const ListEquality().equals({{name}}, other.{{name}}){{#hasMore}} &&
      {{/hasMore}}
      {{/isListContainer}}
      {{^isListContainer}}
        {{#isMapContainer}}
          const MapEquality().equals({{name}}, other.{{name}}){{#hasMore}} &&
        {{/hasMore}}
        {{/isMapContainer}}
        {{^isMapContainer}}
          {{name}} == other.{{name}}{{#hasMore}} &&
        {{/hasMore}}
        {{/isMapContainer}}
      {{/isListContainer}}
    {{/complexType}}{{^complexType}}
     {{name}} == other.{{name}}{{#hasMore}} &&
  {{/hasMore}}{{/complexType}}{{/vars}}
    {{#parent}} &&
    super.equals(o){{/parent}};{{/hasVars}}{{^hasVars}}
    return {{#parent}}super.equals(o){{/parent}}{{^parent}}true{{/parent}};{{/hasVars}}
    }

    return false;
  }

  @override
  int get hashCode {
    var hashCode = runtimeType.hashCode;

  {{#hasVars}}
    {{#vars}}
    {{#complexType}}
      {{#isListContainer}}
        hashCode = hashCode ^ const ListEquality().hash({{name}});
      {{/isListContainer}}
      {{^isListContainer}}
        {{#isMapContainer}}
            hashCode = hashCode ^ const MapEquality().hash({{name}});
        {{/isMapContainer}}
        {{^isMapContainer}}
            if ({{name}} != null) {
              hashCode = hashCode ^ {{name}}.hashCode;
            }
        {{/isMapContainer}}
      {{/isListContainer}}
    {{/complexType}}{{^complexType}}
    if ({{name}} != null) {
      hashCode = hashCode ^ {{name}}.hashCode;
    }
{{/complexType}}{{/vars}}{{/hasVars}}

    return hashCode{{#parent}} ^ super.hashCode{{/parent}};
  }
}
